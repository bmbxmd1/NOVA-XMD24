const config = require('../config');
const { cmd, commands } = require('../command');
const { getBuffer, getGroupAdmins, getRandom, h2k, isUrl, Json, runtime, sleep, fetchJson } = require('../lib/functions');

cmd({
  pattern: "tagall",
  react: "üîä",
  alias: ["gc_tagall"],
  desc: "To Tag all Members",
  category: "group",
  use: '.tagall [message]',
  filename: __filename
},
async (conn, mek, m, { from, participants, reply, isGroup, senderNumber, groupAdmins, prefix, command, args, body }) => {
  try {
    if (!isGroup) return reply("‚ùå This command can only be used in groups.");

    const botOwner = conn.user.id.split(":")[0];
    const senderJid = senderNumber + "@s.whatsapp.net";

    if (!groupAdmins.includes(senderJid) && senderNumber !== botOwner) {
      return reply("‚ùå Only group admins or the bot owner can use this command.");
    }

    let groupInfo = await conn.groupMetadata(from).catch(() => null);
    if (!groupInfo) return reply("‚ùå Failed to fetch group information.");

    let groupName = groupInfo.subject || "Unknown Group";
    let totalMembers = participants ? participants.length : 0;
    if (totalMembers === 0) return reply("‚ùå No members found in this group.");

    let emojis = ['üì¢', 'üîä', 'üåê', 'üî∞', '‚ù§‚Äçü©π', 'ü§ç', 'üñ§', 'ü©µ', 'üìù', 'üíó', 'üîñ', 'ü™©', 'üì¶', 'üéâ', 'üõ°Ô∏è', 'üí∏', '‚è≥', 'üóø', 'üöÄ', 'üéß', 'ü™Ä', '‚ö°', 'üö©', 'üçÅ', 'üó£Ô∏è', 'üëª', '‚ö†Ô∏è', 'üî•'];
    let randomEmoji = emojis[Math.floor(Math.random() * emojis.length)];

    let message = body.slice(body.indexOf(command) + command.length).trim();
    if (!message) message = "Attention Everyone";

    let teks = `‚ñ¢ Group : *${groupName}*\n‚ñ¢ Members : *${totalMembers}*\n‚ñ¢ Message: *${message}*\n\n‚îå‚îÄ‚îÄ‚îÄ‚ä∑ *MENTIONS*\n`;

    for (let mem of participants) {
      if (!mem.id) continue;
      teks += `${randomEmoji} @${mem.id.split('@')[0]}\n`;
    }

    teks += "‚îî‚îÄ‚îÄ‚ú™ ùó°ùó¢ùó©ùóî ‚îÉ ùó´ùó†ùóó ‚ú™‚îÄ‚îÄ";

    const newsletterContext = {
      contextInfo: {
        forwardingScore: 999,
        isForwarded: true,
        forwardedNewsletterMessageInfo: {
          newsletterJid: "120363382023564830@newsletter",
          newsletterName: "ùôΩùôæùöÖùô∞-ùöáùôºùô≥",
          serverMessageId: 1
        }
      }
    };

    await conn.sendMessage(from, {
      text: teks,
      mentions: participants.map(a => a.id),
      ...newsletterContext.contextInfo
    }, { quoted: mek });

  } catch (e) {
    console.error("TagAll Error:", e);
    reply(`‚ùå *Error Occurred !!*\n\n${e.message || e}`);
  }
});
